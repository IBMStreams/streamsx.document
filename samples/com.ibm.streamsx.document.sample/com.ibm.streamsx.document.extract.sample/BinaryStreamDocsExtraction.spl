namespace com.ibm.streamsx.document.extract.sample;

use com.ibm.streamsx.document.extract::DocumentSource ;
use com.ibm.streamsx.document.extract::Document_t ;

composite BinaryStreamDocsExtraction {
	graph
		
		/**
		 * Example of receiving document as blob
		 */
		stream<blob document> BinaryDoc = FileSource()
		{
			param
				file : "docs/seat_plan.xls" ;
				format : block ;
				blockSize : 10485799u ;
		}

		stream<Document_t> DocsFromBinary = DocumentSource(BinaryDoc)
		{ 
			param
				extractionType: "All";
				returnSystemMessages: true;				
		}

		

		() as DocDataAndMetadataSink = Custom(DocsFromBinary as Docs)
		{
			logic
				onTuple Docs :
				{
					printStringLn("=========== Document with ID '" +(rstring)
						Docs.docId + "' ====================== ") ;
					mutable uint32 i = 0, j = 0 ;
					printStringLn("--> Messages ") ;
					for(ustring msg in msgs)
					{
						printStringLn("msg[" +(rstring) i + "]: " +(rstring) msg) ;
						i ++ ;
					}

					printStringLn("--> Properties ") ;
					for(ustring prop in props)
					{
						printStringLn("prop[" +(rstring) prop + "]: " +(rstring) props [ prop
							]) ;
						j ++ ;
					}

					if(length(text) > 0)
					{
						printStringLn("--> Text ") ;
						printStringLn((rstring) text) ;
					}

				}
		}

}
